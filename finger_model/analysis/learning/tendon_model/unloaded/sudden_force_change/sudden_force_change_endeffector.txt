/Users/kstorm/PycharmProjects/thesis/venv/bin/python "/Users/kstorm/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-P/ch-0/193.5233.109/PyCharm.app/Contents/plugins/python/helpers/pydev/pydevconsole.py" --mode=client --port=58481
import sys; print('Python %s on %s' % (sys.version, sys.platform))
sys.path.extend(['/Users/kstorm/PycharmProjects/thesis', '/Users/kstorm/PycharmProjects/thesis/finger_model'])
Python 3.7.6 (default, Dec 30 2019, 19:38:26)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.15.0 -- An enhanced Interactive Python. Type '?' for help.
PyDev console: using IPython 7.15.0
Python 3.7.6 (default, Dec 30 2019, 19:38:26)
[Clang 11.0.0 (clang-1100.0.33.16)] on darwin
runfile('/Users/kstorm/PycharmProjects/thesis/finger_model/analysis/learning/tendon_model/unloaded/sudden_force_change/learn_force_change_end_effector_loss.py', wdir='/Users/kstorm/PycharmProjects/thesis/finger_model/analysis/learning/tendon_model/unloaded/sudden_force_change')
/Users/kstorm/PycharmProjects/thesis/venv/lib/python3.7/site-packages/jax/lib/xla_bridge.py:116: UserWarning: No GPU/TPU found, falling back to CPU.
  warnings.warn('No GPU/TPU found, falling back to CPU.')
Performing gradient descent on model with tendons
Experiment name: sudden force change trajectory
 with end-effector loss function
Reference duration: 1.5
dt: 0.001
Start time is _13-Jun-2020_(02:03:55.266657)
### Current loss for iteration 0 is: 0.15101831058460027
Current optimal params are
[0.95983308 1.02364984 0.79889609 1.05398254 0.8862581  0.90047874
 1.4871041  0.94775268 0.81762693 0.77534623 2.19175635 0.83676758
 0.8691172  0.91040899 1.4032345  0.97038822 1.01557043 1.01557043
 1.01557043 1.01557043 0.99112215 0.99112215 0.99112215 0.99112215
 1.07536197 1.07536197 1.07536197 1.07536197 0.9796642  0.9796642
 0.9796642  0.9796642 ]
Time passed since start: 0:01:36.736183
Average time per iteration: 0:01:36.736183
### Current loss for iteration 1 is: 0.1504034395098429
Time passed since start: 0:01:53.055357
Average time per iteration: 0:00:56.527678
### Current loss for iteration 2 is: 0.1501704223850149
Time passed since start: 0:02:13.959876
Average time per iteration: 0:00:44.653292
### Current loss for iteration 3 is: 0.14973867410579764
Time passed since start: 0:02:33.143976
Average time per iteration: 0:00:38.285994
### Current loss for iteration 4 is: 0.14875776934320137
Time passed since start: 0:03:06.580502
Average time per iteration: 0:00:37.316100
### Current loss for iteration 5 is: 0.14875767298165168
Current optimal params are
[ 0.85176312  0.97271576  0.75129949  1.13543511  1.46086238  1.914707
  1.73428746 -0.47197255 -2.81420901 -3.87791615  2.55164069 -1.90276079
  1.48084272  1.86547527  1.58148014 -0.75834021  1.06207888  1.09280427
  0.97850531  1.08222653  1.00849468  0.99573961  1.05036095  1.00607111
  1.09787474  1.09348821  1.14397216  1.09760733  0.93700357  0.91433273
  1.28908082  0.93137229]
Time passed since start: 0:03:11.820340
Average time per iteration: 0:00:31.970057
### Current loss for iteration 6 is: 0.14772408699161896
Time passed since start: 0:03:46.611557
Average time per iteration: 0:00:32.373080
### Current loss for iteration 7 is: 0.14769939948795055
Time passed since start: 0:03:54.962864
Average time per iteration: 0:00:29.370358
### Current loss for iteration 8 is: 0.14713766652763982
Time passed since start: 0:04:08.933806
Average time per iteration: 0:00:27.659312
### Current loss for iteration 9 is: 0.14711295798517512
Time passed since start: 0:04:17.132163
Average time per iteration: 0:00:25.713216
Warning: Desired error not necessarily achieved due to precision loss.
         Current function value: 0.147113
         Iterations: 10
         Function evaluations: 96
         Gradient evaluations: 87
The losses convergence:
[DeviceArray(0.15101831, dtype=float64), DeviceArray(0.15040344, dtype=float64), DeviceArray(0.15017042, dtype=float64), DeviceArray(0.14973867, dtype=float64), DeviceArray(0.14875777, dtype=float64), DeviceArray(0.14875767, dtype=float64), DeviceArray(0.14772409, dtype=float64), DeviceArray(0.1476994, dtype=float64), DeviceArray(0.14713767, dtype=float64), DeviceArray(0.14711296, dtype=float64)]
Gradient descent has finished.
The best solution seems to be:
{'rnn_tau': DeviceArray([0.85056303, 0.97271592, 0.75364186, 0.21139885], dtype=float64), 'rnn_bias': DeviceArray([ 1.51635819,  1.91470798,  1.74731912, -0.75966978], dtype=float64), 'rnn_gains': DeviceArray([-2.86930222, -3.87791693,  2.56769849, -2.72855232], dtype=float64), 'rnn_states': DeviceArray([ 1.54535899,  1.86522944,  1.5848782 , -1.78465822], dtype=float64), 'rnn_weights': DeviceArray([[1.06212678, 1.09286985, 0.9691481 , 1.08083615],
             [1.00849468, 0.99573961, 1.0503596 , 1.00606939],
             [1.09788897, 1.09349304, 1.15305084, 1.09916525],
             [0.93525943, 0.91222434, 2.02743191, 1.43268981]],            dtype=float64), 'interval': array([0.000e+00, 1.000e-03, 2.000e-03, ..., 1.498e+00, 1.499e+00,
       1.500e+00]), 'reference': {'angles': DeviceArray([[ 1.57079633,  1.57079633,  1.57079633,  0.        ,
               0.        ,  0.        ],
             [ 1.57077409,  1.57102932,  1.57102885, -0.02017286,
               0.39495527,  0.46880054],
             [ 1.5707076 ,  1.5714401 ,  1.57131727, -0.10388534,
               0.38009724,  0.23879921],
             ...,
             [ 2.04742072,  2.52287968,  2.50288365,  3.04612014,
               4.68777579,  5.62127305],
             [ 2.05046439,  2.52756164,  2.50849368,  3.04117971,
               4.67609721,  5.59873909],
             [ 2.05350302,  2.53223179,  2.51408103,  3.0360492 ,
               4.66415482,  5.57591813]], dtype=float64), 'end_effector': DeviceArray([[ 2.09330000e-01,  2.09329997e-01,  2.09329980e-01, ...,
               1.52819964e-01,  1.52231403e-01,  1.51642048e-01],
             [-1.28177657e-17,  2.33440483e-05,  5.65696605e-05, ...,
               1.34596785e-01,  1.35189755e-01,  1.35778545e-01]],            dtype=float64), 'end_position': [0, DeviceArray(0.08817559, dtype=float64), DeviceArray(0.1264482, dtype=float64), DeviceArray(0.15164205, dtype=float64), 0, DeviceArray(0.04620895, dtype=float64), DeviceArray(0.10104329, dtype=float64), DeviceArray(0.13577855, dtype=float64)], 'positions': DeviceArray([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
               0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
             [ 9.95500000e-02,  9.95500000e-02,  9.95499996e-02, ...,
               8.84550181e-02,  8.83155989e-02,  8.81755943e-02],
             [ 1.66420000e-01,  1.66419998e-01,  1.66419986e-01, ...,
               1.27238762e-01,  1.26843873e-01,  1.26448203e-01],
             ...,
             [-6.09567944e-18, -2.21366784e-06, -8.83298861e-06, ...,
               4.56717887e-02,  4.59408042e-02,  4.62089502e-02],
             [-1.01902860e-17,  1.33666295e-05,  3.42158431e-05, ...,
               1.00145802e-01,  1.00595804e-01,  1.01043286e-01],
             [-1.28177657e-17,  2.33440483e-05,  5.65696605e-05, ...,
               1.34596785e-01,  1.35189755e-01,  1.35778545e-01]],            dtype=float64), 'torques': DeviceArray([[ 0. ,  5. ,  9.5, 30. ],
             [ 0. ,  7.5,  7. , 12. ],
             [ 0. ,  7.5,  7. , 12. ],
             ...,
             [ 0. ,  5. ,  9.5, 30. ],
             [ 0. ,  5. ,  9.5, 30. ],
             [ 0. ,  5. ,  9.5, 30. ]], dtype=float64), 'velocities': DeviceArray([[ 0.        , -0.02017286, -0.10388534, ...,  3.04612014,
               3.04117971,  3.0360492 ],
             [ 0.        ,  0.39495527,  0.38009724, ...,  4.68777579,
               4.67609721,  4.66415482],
             [ 0.        ,  0.46880054,  0.23879921, ...,  5.62127305,
               5.59873909,  5.57591813]], dtype=float64)}}
End time: _13-Jun-2020_(02:03:55.266657)
Total time passed: 0:05:35.699622
Average time per iteration: 0:00:01.342798
Simulating the solution...DONE
The end effector loss is:  0.14711295798517512
Plotting comparison between reference and approximated
Plotting the used forces/torques
Animating the comparison between the reference and the approximation.
100%|██████████| 151/151 [00:50<00:00,  2.98it/s]
Moviepy - Building video sudden force change trajectory
 with end-effector loss function_13-Jun-2020_(02:10:32.041949).mp4.
Moviepy - Writing video sudden force change trajectory
 with end-effector loss function_13-Jun-2020_(02:10:32.041949).mp4
                                                              Moviepy - Done !
Moviepy - video ready sudden force change trajectory
 with end-effector loss function_13-Jun-2020_(02:10:32.041949).mp4
Process has finished.